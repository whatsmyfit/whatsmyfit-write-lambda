# Serverless service
service: whatsmyfit-write # NOTE: update this with your service name

# The provider
provider:
  name: aws
  runtime: nodejs8.10

  # Overwrite defaults
  memorySize: 512 # overwrite default memory of 1024
  versionFunctions: false # don't create a new function version with each deploy
  region: eu-west-2 # override default region us-east-1

  environment:
    DYNAMODB_TABLE: notifications-${opt:stage, self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

# Resources
resources:
  Resources:
    notificationsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: ${self:custom.${opt:stage, self:provider.stage}.deletion_policy}
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

# Lambda functions
functions:
  notification:
    handler: src/handlers/notifications.create
    events:
      - http:
          path: notifications
          method: post
          documentation:
            summary: Create new Fitbit Notification
            description: Create new Fitbit Notification
            tags:
              - Notifications
            requestBody:
              description: Array of Notifications to create
            requestModels:
              "application/json": NotificationArray
            methodResponses:
              - statusCode: "204"
                responseBody:
                  description: Notifications created

  subscriber:
    handler: src/handlers/subscriber.verify
    environment:
      SUBSCRIBER_VERIFICATION_CODE: ${self:custom.secrets.SUBSCRIBER_VERIFICATION_CODE}
    events:
    - http:
        path: notifications
        method: get
        documentation:
          summary: Verify Fitbit Subscriber
          description: Used by Fitbit Subscriber API to verify Subscriber endpoint
          tags:
            - Notifications
          queryParams:
          - name: verify
            description: The subscriber verification code to be validated
            required: true
          methodResponses:
            - statusCode: "204"
              responseBody:
                description: Subscriber verification code is valid
            - statusCode: "404"
              responseBody:
                description: Subscriber verification code is not valid

# Serverless Plugins
plugins:
  - '@anttiviljami/serverless-stack-output' # saving service endpoint after creating stack in order to use the endpoints url in integration tests
  - serverless-aws-documentation # swagger doc
  - serverless-plugin-typescript
  - serverless-dynamodb-local # local aws dynamodb instance, dev only
  - serverless-offline # deploying lambda and api gateway locally in offline mode
  - serverless-secrets-plugin # encrypting / decrypting secrets
  - serverless-plugin-include-dependencies # making sure that only npm dependencies for production is packaged and deployed

# Include/Exclude files from package
package:
  exclude:
    - node_modules/**

custom:
  # serverless-stack-output
  output:
    file: __tests__/stackoutput/stack.json # where stack output should be stored by the serverless-stack-output plugin
  # serverless-secrets-plugin
  secrets: ${file(secrets/secrets.${opt:stage, self:provider.stage}.yml)}
  secretsFilePathPrefix: secrets # path prefix where secret files are stored
  # DynamoDB deletion policy when deleting CF stack in different stages
  dev:
    deletion_policy: Delete
  test:
    deletion_policy: Delete
  qa:
    deletion_policy: Delete
  prod:
    deletion_policy: Retain
  # serverless-dynamodb-local
  DB_PREFIX: dev
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: ${self:provider.environment.DYNAMODB_TABLE}
            sources: [./__tests__/dbseed/notifications-seed.json]
  # API Gateway documentation
  documentation:
    api:
      info:
        version: '2'
        title: WhatsMyFit Write APIs
        description: REST APIs to write data to WhatsMyFit
        contact:
          name: Ismar Slomic
          url: https://whatsmy.fit
          email: ismar@slomic.no
        license:
          name: Licensing
          url: https://whatsmy.fit
    tags:
      - name: Notifications
        description: Api to retrieve new notifications from Fitbit Subscription API
    resources:
      - path: "notifications"
        description: "Fitbit Notifications resource"
    models:
      - name: "Notification"
        description: "Notification to be created"
        contentType: "application/json"
        schema:
          type: "object"
          properties:
            collectionType:
              type: "string"
            date:
              type: "string"
            ownerId:
              type: "string"
            ownerType:
              type: "string"
            subscriptionId:
              type: "string"
      - name: "NotificationArray"
        description: "Array of Notifications to be created"
        contentType: "application/json"
        schema:
          type: "array"
          items:
            $ref: "{{model: Notification}}"